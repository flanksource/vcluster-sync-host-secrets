name: Create Release
on:
  push:
    branches:
      - main
jobs:
  semantic-release:
    runs-on: ubuntu-latest
    outputs:
      release-version: ${{ steps.semantic.outputs.new_release_version }}
      new-release-published: ${{ steps.semantic.outputs.new_release_published }}
    steps:
      - uses: actions/checkout@v2
      - uses: cycjimmy/semantic-release-action@v3
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: semantic-release
    steps:
      - uses: actions/checkout@v3
      - name: Set version
        run: |
          if ${{ needs.semantic-release.outputs.new-release-published }}; then
            echo "RELEASE_VERSION=${{ needs.semantic-release.outputs.release-version }}" >> $GITHUB_ENV
          else
            git fetch --prune --unshallow
            export VERSION=$(git describe --abbrev=0 --tags | sed -e 's/^v//')
            echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          fi
      - name: Update chart version
        run: sed -i "s/:v0/:v$RELEASE_VERSION/" plugin.yaml
      - name: Upload plugin manifest to action run
        uses: actions/upload-artifact@v2
        with:
          if-no-files-found: ignore
          name: plugin.yaml
          path: ./plugin.yaml
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./plugin.yaml
          tag: v${{ env.RELEASE_VERSION }}
          overwrite: true
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@v5
        with:
          name: flanksource/vcluster-sync-host-secrets
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          snapshot: true
          tags: "latest,v${{ env.RELEASE_VERSION }}"
          cache: true
